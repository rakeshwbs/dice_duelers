# Tutorial 9 - Server Class

Server.H

```c++
#ifndef SERVER_H
#define SERVER_H

#include <winsock2.h>
#include <string>

#pragma comment(lib, "ws2_32.lib")

class Server {
private:
    WSADATA wsaData;
    SOCKET listenSocket;
    SOCKET clientSocket;
    sockaddr_in serverAddr;

public:
    Server();
    ~Server();

    bool initialize(int port);
    bool acceptClient();
    std::string receive();
    bool sendMessage(const std::string& message);
    void close();
};

#endif // SERVER_H

```

Server.cpp

```c++
#include "Server.h"
#include <iostream>

Server::Server() {
    listenSocket = INVALID_SOCKET;
    clientSocket = INVALID_SOCKET;
}

Server::~Server() {
    close();
}

bool Server::initialize(int port) {
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed.\n";
        return false;
    }

    listenSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (listenSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed.\n";
        return false;
    }

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(port);

    if (bind(listenSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Bind failed.\n";
        return false;
    }

    if (listen(listenSocket, SOMAXCONN) == SOCKET_ERROR) {
        std::cerr << "Listen failed.\n";
        return false;
    }

    std::cout << "Server initialized. Waiting for client...\n";
    return true;
}

bool Server::acceptClient() {
    clientSocket = accept(listenSocket, nullptr, nullptr);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Client connection failed.\n";
        return false;
    }
    std::cout << "Client connected!\n";
    return true;
}

std::string Server::receive() {
    char buffer[1024] = {};
    int bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);
    if (bytesReceived <= 0) return "";
    return std::string(buffer, bytesReceived);
}

bool Server::sendMessage(const std::string& message) {
    int result = send(clientSocket, message.c_str(), message.length(), 0);
    return result != SOCKET_ERROR;
}

void Server::close() {
    if (clientSocket != INVALID_SOCKET) closesocket(clientSocket);
    if (listenSocket != INVALID_SOCKET) closesocket(listenSocket);
    WSACleanup();
}

```

### Constructor

```c++
Server::Server() {
    listenSocket = INVALID_SOCKET;
    clientSocket = INVALID_SOCKET;
}
```

#### **Purpose & Explanation**

This is the **constructor** for the `Server` class. It performs basic initialization of the class's internal state. Specifically:

🔹 `listenSocket = INVALID_SOCKET;`

- This initializes the socket used for **listening for incoming client connections**.
- `INVALID_SOCKET` is a special constant from Winsock (`#define INVALID_SOCKET (~0)`), used to indicate that no socket is currently open or valid.
- By assigning this value upfront, the program knows that this socket is not yet active, so future logic can check this state before using or closing it.

🔹 `clientSocket = INVALID_SOCKET;`

- This socket is used to **communicate with the connected client** once accepted.
- It is also initialized to `INVALID_SOCKET` to indicate that no client has connected yet.

### bool Server::initialize(int port) 

```c++
if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
    std::cerr << "WSAStartup failed.\n";
    return false;
}
```

#### **Purpose & Detailed Explanation**

This line initializes the **Winsock library** on Windows. Before using any socket-related functions, you **must call `WSAStartup()`** once per process.

#### **Line-by-Line Breakdown:**

🧩 `WSAStartup(...)`

- This is the first Winsock API call you **must** make before using any other socket functions.
- It loads the necessary DLLs and prepares the network stack for your program.

------

🧩 `MAKEWORD(2, 2)`

- This macro combines two bytes: major version = `2`, minor version = `2`
- You're requesting **Winsock version 2.2**, which is standard and widely supported on all modern Windows machines.

------

🧩 `&wsaData`

- This is a pointer to a `WSADATA` structure, where Winsock stores details about the version it loaded.
- The structure contains information like the description of the Winsock DLL, supported protocols, etc.
- Although most programs don’t use this info directly, you must pass it as an output parameter.

`!= 0`

- If `WSAStartup` returns anything other than `0`, it means **initialization failed**.
- Common causes:
  - Winsock DLL is missing or corrupted
  - Called too early (e.g., before system is fully initialized)
  - Version mismatch

#### If WSAStartup Fails

- The function immediately logs an error to `std::cerr`
- Returns `false` to signal failure to the calling code
- Prevents the server from continuing setup, since any further Winsock function would crash or misbehave

##### Creating a TCP Socket for Listening

```c++
listenSocket = socket(AF_INET, SOCK_STREAM, 0);
if (listenSocket == INVALID_SOCKET) {
    std::cerr << "Socket creation failed.\n";
    return false;
}
```

####  **Purpose & Detailed Explanation**

This snippet creates a **server-side TCP socket**, which will be used to listen for incoming connections from clients. It is a foundational step in setting up the server.

------

#### 🔍 **Line-by-Line Breakdown**

##### 🧩 `socket(AF_INET, SOCK_STREAM, 0)`

- **`AF_INET`**: Specifies the **IPv4 address family**.
- **`SOCK_STREAM`**: Requests a **stream socket**, which means it will use **TCP** (as opposed to `SOCK_DGRAM` for UDP).
- **`0`**: Tells the system to use the default protocol for `SOCK_STREAM`, which is **IPPROTO_TCP**.

This call returns a socket descriptor (`SOCKET` on Windows) that will be stored in the class member `listenSocket`.

------

##### 🧩 `if (listenSocket == INVALID_SOCKET)`

- `INVALID_SOCKET` is a constant that indicates failure (usually `~0`).
- If socket creation fails, it means the server **cannot proceed with listening**.
  - Possible reasons include: insufficient resources, too many open sockets, or internal Winsock failure.
- The error is logged to `std::cerr`, and `initialize()` returns `false` to signal failure.

#### Configuring and Binding the Server Socket to a Port

```c++
serverAddr.sin_family = AF_INET;
serverAddr.sin_addr.s_addr = INADDR_ANY;
serverAddr.sin_port = htons(port);

if (bind(listenSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
    std::cerr << "Bind failed.\n";
    return false;
}
```

### **Purpose**

This snippet configures the socket’s address structure (`sockaddr_in`) and binds the listening socket to a specific **IP address and port** on the server machine. This makes the socket **reachable** so that clients can connect to it.

------

#### 🔍 **Line-by-Line Explanation**

##### 🧩 `serverAddr.sin_family = AF_INET;`

- Sets the address family to **IPv4** (`AF_INET`).
- Required for the socket to understand what kind of addresses it will deal with.

##### 🧩 `serverAddr.sin_addr.s_addr = INADDR_ANY;`

- Binds the socket to **all available local interfaces**.
- This allows clients to connect using **any of the server’s IP addresses** (e.g., `192.168.x.x`, `127.0.0.1`, etc.).
- If you only wanted to accept connections on a specific IP, you would use `inet_addr("192.168.1.5")`, for example.

##### 🧩 `serverAddr.sin_port = htons(port);`

- Sets the port number to listen on, converting it to **network byte order** using `htons()` (host-to-network short).
- Ports must be in network byte order when used in sockets.

------

##### 🧩 `bind(...)`

```c++
if (bind(listenSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
```

- Attempts to bind the **configured address and port** to the `listenSocket`.
- **If `bind` fails**, the server cannot accept connections on that port.
  - Common reasons:
    - Port already in use
    - Insufficient privileges (e.g., trying to bind to a restricted port like 80)
    - Invalid socket
- On failure, it logs the error and returns `false`.

#### Putting the Server Socket into Listening Mode

```c++
if (listen(listenSocket, SOMAXCONN) == SOCKET_ERROR) {
    std::cerr << "Listen failed.\n";
    return false;
}

std::cout << "Server initialized. Waiting for client...\n";
return true;
```

#### **Purpose**

This snippet **transitions the socket from a bound state to a listening state**, enabling it to accept incoming client connections. It also provides **feedback to the user** indicating that the server setup was successful.

------

#### 🔍 **Line-by-Line Explanation**

##### 🧩 `listen(listenSocket, SOMAXCONN)`

- The `listen()` function instructs the socket to begin **listening** for incoming TCP connection requests.
- Parameters:
  - `listenSocket`: the previously created and bound socket
  - `SOMAXCONN`: a system-defined constant specifying the **maximum length of the connection queue** (usually 5 to 200).
    - It tells the OS how many pending connections can wait while the server is busy before being rejected.

##### 🧩 Error Handling

```c++
if (listen(...) == SOCKET_ERROR) { ... }
```

- If `listen()` fails, it means the socket cannot accept connections.
  - Possible causes:
    - Socket not bound
    - Resource exhaustion
    - Already in listening mode
- It logs the error message and halts initialization by returning `false`.

------

##### 🧩 `std::cout << "Server initialized. Waiting for client...\n";`

- This line indicates that the **server has successfully completed setup** and is now awaiting a connection.
- Provides useful feedback during runtime for the developer or user.

------

##### 🧩 `return true;`

- Confirms that the `initialize()` function executed **all setup steps successfully**.
- This enables the next phase: `acceptClient()` to be called.

#### Accepting an Incoming Client Connection

```c++
bool Server::acceptClient() {
    clientSocket = accept(listenSocket, nullptr, nullptr);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Client connection failed.\n";
        return false;
    }
    std::cout << "Client connected!\n";
    return true;
}
```

#### ✅ **Purpose**

This method blocks and waits for a client to attempt a connection. When a client does connect, it creates a new socket specifically for communicating with that client.

------

#### 🔍 **Line-by-Line Breakdown**

##### 🧩 `clientSocket = accept(listenSocket, nullptr, nullptr);`

- The `accept()` function is part of the Winsock API.
- It waits (blocks) until an incoming client connection request is received.
- Once a client connects:
  - `accept()` returns a **new socket descriptor** — distinct from the `listenSocket`.
  - This new `clientSocket` will be used for actual data communication.
- Parameters:
  - `listenSocket`: the socket already in listening mode.
  - `nullptr, nullptr`: Normally used to retrieve client info (IP, port), but here we ignore it.

------

##### 🧩 `if (clientSocket == INVALID_SOCKET)`

- If `accept()` fails, it returns `INVALID_SOCKET`.
- Possible reasons:
  - Listening socket was closed before `accept()`
  - A socket-level error occurred
- On failure, we:
  - Print an error
  - Return `false` to indicate the connection attempt failed

------

##### 🧩 On Success

```c++
std::cout << "Client connected!\n";
return true;
```

- If `accept()` succeeds:
  - The server has a live TCP connection with a client
  - `clientSocket` now becomes the active endpoint for `recv()` and `send()` calls
- The original `listenSocket` is often kept open, but in Dice Duelers, it typically serves just one client, so it could be closed later

#### Receiving Messages from the Connected Client

```c++
std::string Server::receive() {
    char buffer[1024] = {};
    int bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);
    if (bytesReceived <= 0) return "";
    return std::string(buffer, bytesReceived);
}
```

####  **Purpose**

This method receives incoming data from the connected client using the Winsock `recv()` function and returns it as a `std::string`. It’s used by the server to **read messages sent by the client** during the game.

------

#### 🔍 **Line-by-Line Explanation**

##### 🧩 `char buffer[1024] = {};`

- Creates a buffer to hold incoming data.
- The buffer is initialized to 0s using `{}` (C++11 syntax).
- The size `1024` means it can hold up to 1024 bytes per message.

------

##### 🧩 `int bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);`

- `recv()` reads data from the connected client socket.
- Parameters:
  - `clientSocket`: The socket connected to the client
  - `buffer`: The memory area to store incoming data
  - `sizeof(buffer)`: The maximum number of bytes to read (1024 here)
  - `0`: Flags — usually 0 for basic receiving
- Return value:
  - **`> 0`** → number of bytes received
  - **`0`** → the connection was closed by the client (graceful shutdown)
  - **`< 0`** → an error occurred (e.g., socket issue, disconnect)

------

##### 🧩 `if (bytesReceived <= 0) return "";`

- Handles connection closure or error:
  - If the client disconnects or `recv()` fails, we return an empty string to indicate that no data was received.
- This allows the calling code to detect disconnects or network errors.

------

##### 🧩 `return std::string(buffer, bytesReceived);`

- Constructs and returns a `std::string` from the buffer.
- The constructor takes `bytesReceived` so we only return **valid data**, ignoring any uninitialized parts of the buffer.

### **Snippet Title:** “Sending Messages to the Connected Client”

```c++
bool Server::sendMessage(const std::string& message) {
    int result = send(clientSocket, message.c_str(), message.length(), 0);
    return result != SOCKET_ERROR;
}
```

------

#### ✅ **Purpose**

This method sends a `std::string` message to the client using the Winsock `send()` function. It returns `true` on success and `false` if the message could not be sent.

------

#### 🔍 **Line-by-Line Explanation**

🧩 `int result = send(...)`

```c++
result = send(clientSocket, message.c_str(), message.length(), 0);
```

- `send()` transmits bytes from your program to the remote peer (client).
- Parameters:
  - `clientSocket`: The socket representing the active connection to the client
  - `message.c_str()`: A pointer to the character array (C-style string) containing the data
  - `message.length()`: The number of bytes to send (excluding null terminator)
  - `0`: Flags — `0` means default behavior (blocking send)
- The function attempts to send the full message.
- Return value:
  - **`> 0`**: Number of bytes actually sent
  - **`0`**: Remote side closed the connection (rare in blocking send)
  - **`SOCKET_ERROR`**: Something went wrong (e.g., connection dropped, socket not valid)

------

🧩 `return result != SOCKET_ERROR;`

- Returns `true` if the message was sent successfully
- Returns `false` if there was an error
- This enables the calling function to take action (e.g., retry, disconnect) if needed

------

##### ⚠️ Important Notes

- **No newline or delimiter is added**: if you're using line-based protocols (e.g., `ROLL|6\n`), you must include those in `message`.
- **No guarantee that all bytes are sent at once**: for short strings this is usually fine, but long data may require looping with `send()` until complete (not done here because this app sends short game commands).
